This is Git HomeWork from Olga Suslova

# Руководство пользователя

## git version
Команда показывает версию git

## git init
Инициализация git

## git status
Показывает текущее состояние git (в частности, наличие измененных файлов)

## git add *-file-*
Добавить файл(ы) к отслеживаемым

Переключение между файлами с помощью -Tab-


## git commit -m *-сomment-*
Отправить изменения на сервер в репозиторий
- git commit -a -m *-сomment-* - c тэгом -a без предварительного git add - отправка всех изменений на сервер

## git revert
'Сторно' коммита
git revert *-n1234-* - создает еще один коммит, который выполняет изменения, противоположные тому коммиту n1234, который отменяется


## git reset
Отмена/откат последних коммитов
git reset HEAD~*-n-* - откатит последние n коммитов
- --hard - полное удаление
= --mixed - удаление коммита без отката изменений

## git log
Просмотр истории изменений / существующих коммитов с их хэш-кодами
- git log --graph - визуализирует log изменений

## git checkout
Перейти на один из коммитов / одну из веток
- git checkout *-n1234-* - перейти на коммит n1234 (достаточно набрать первые 4 цифры)
- git checkout master - перейти на последний коммит
Переключение между ветками
- git checkout *-name_branch-* - перейти на ветку name_branch
- git checkout -b *-name_branch-* - создать и сразу же перейти на ветку name_branch

## git diff
Показывает разницу между последним коммитом и последними сохраненными изменениями

Переключиться на другой диск - просто набираем имя Диска

## git branch
Выводит список веток
'*' отмечает ту ветку, где мы располагаемся
- git branch name - создать ветку name
В реальной работе ветки нужны для выполнения отдельных задач
- git branch -d *-name_branch-* - удалить ветку name_branch

Для игнорирования файла для отправки на сервер необходимо добавить его название в файл .gitignore. Затем его 'закоммитить'.

## git merge 
Объединяет (сливает) ветки
- git merge *-name_branch-* - объединяет ветку name_branch с текущей веткой

## git clone
Копирует репозиторий
- git clone *-url-* - копирует репозиторий по ссылке url в локальный репозиторий
- Это второй способ создание репозитория (первый - git init)

## git remote
Залить репозиторий с локального ПК на сервер
- git remote add origin *-url-* - говорим, что появляется удаленный репозиторий и хотим с ним работать по адресу url
- origin - название, которое даем удаленному репозиторию

И каждый раз, когда захотим что-то отправить в интернет, git будет знать, что отправлять надо на этот репозиторий. Т.е. по сути связываем локальный и удаленный репозитории.

## git push
Команда гиту "протолкнуть" то, что сделано локально, в интернет
- git push - отправит все изменения, которые были сделаны
- git push -u origin main - первоначальная отправка ветки main на удаленный репозиторий origin 
- *push* - толкать, направлять

## git pull
- git pull - забрать все изменения с удаленного репозитория
- *pull* - тянуть
При этом pull не только загрузит изменения, но и попытается "смержить" все ветки, слить удаленное и локальное состояние

## git stash
- git stash Команда git stash позволяет на время «сдать в архив» (или отложить) изменения, сделанные в рабочей копии, чтобы вы могли применить их позже.

![Схема работы git](git_works.png)


## pull-request
Инструмент для предоставления другим людям изменений в проект
- Fork (вилка) - ответвление.
Сначала с помощью кнопки Fork делается полная копия удаленного репозитория на своем аккаунте. К этому репозиторию у нас есть полный доступ.
- git clone -*url*-
Клонируем скопированный репозиторий в нашу локальную папку.
- git branch -*branch_name*-
- git checkout -*branch_name*-
Когда мы хотим внести изменения в чей-то проект, то это всегда делается в отдельной ветке. 
На Гитхабе принято, чтобы любой проект содержал файл README.md (принято называть данный файл капсом).
Далее add и commit.
И направляем изменения в наш удаленный репозиторий.
- git pull
Получает все актуальное состоянине на удаленном репозитории. При этом параллельно делается merge - сливание изменений с текущии изененияи.
- git push .......
Отправляет нашу версию репозитория на внешний репозиторий.
Получаем новую ветку и новую кнопку на удаленном github аккаунте.
- Compare & pull request - сравни и отправь запрос на вливание
- Именно так работают над opensource проектами.


# Синтаксис языка Markdown

Справочник по Markdown от Microsoft:
https://docs.microsoft.com/ru-ru/contribute/markdown-reference

- ✦ # Заголовок – выделение заголовков. Количество символов “#” задаёт уровень заголовка
(поддерживается 6 уровней).
- ✦ = или - – подчёркиванием этими символами (не менее 3 подряд) выделяют заголовки
первого (“=”) и второго (“-”) уровней.
- ✦ \*\*Полужирное начертание** или __ Полужирное начертание__
- ✦ \*Курсивное начертание* или _ Курсивное начертание_
- ✦ \*\*\*Полужирное курсивное начертание***
- ✦ ~~ Зачёркнутый текст~~
- ✦ * или - Строка – ненумерованные списки, символ "*" или "-" в начале строки
- ✦ 1, 2, 3 … – нумерованные списки

## Работа с изображениями
![Пример работы веток](git_branches.png)
!\[text_not_download](image_file) - отобразить изображение, где
text_not_download - текст, выводящийся, если изображение не загрузится;
image_file - имя файла с изображением.


## Create a new repository on the command line
* echo "name" >> README.md
* git init
* git add README.md
* git commit -m "first commit"
* git branch -M main
* git remote add origin url
* git push -u origin main

## Push an existing repository from the command line
* git remote add origin url
* git branch -M main
* git push -u origin main